# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
# 哈希表，先全放进去，没来一个就在哈希表中用O(1)的时间找一下
# class Solution:
#     def hasCycle(self, head: Optional[ListNode]) -> bool:
#         s=set()
#         while head:
#             if head in s:
#                 return True
#             s.add(head)
#             head=head.next
#         return False
# 双指针法，快慢指针，跑得快的最后等于跑得慢的，说明有圆
class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        if head == None or head.next == None:
            return False
        fast=head
        slow=head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
            if fast==slow:
                return True
        return False
