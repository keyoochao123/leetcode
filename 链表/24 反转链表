#     def __init__(self, x):
#         self.val = x
#         self.next = None
# 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。
# 双指针 迭代
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        pre,cur = None,head
        while cur:
            tmp = cur.next #先暂存原顺序链表的下一节点
            cur.next = pre #修改cur的next指向，这时候就是反向的操作
            pre = cur # 去下一个节点
            cur = tmp # 去下一个节点
        return pre

# 递归
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        def recur(cur,pre):
            if not cur:return pre
            res = recur(cur.next,cur) # 递归后续节点
            cur.next = pre # 反指，修改节点引用指向
            return res # 返回反转链表的头节点
        return recur(head,None) # 调用递归并返回
