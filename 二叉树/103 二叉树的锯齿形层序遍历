# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
import collections
class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:return []
        queue=collections.deque()
        res=[]
        queue.append(root)
        while queue:
            res_temp=[]#因为题目要求返回的是按照层划分的数组，所以这边需要一个过渡数组
            size=len(queue)#首先记录一下该层的长度，因为是每一层单边遍历记录，所以需要知道该层的长度
            #因为队列还在不停的往里面压入这些节点的子孩子，所以queue的长度是变化的，所以这边需要提前记录一下
            for i in range(size):#将每行所有的节点全部遍历到
                node=queue.popleft()#首先将最左边的队列元素弹出
                res_temp.append(node.val)#将弹出的节点值压入每行的过渡数组中
                if node.left:
                    queue.append(node.left)#把相应的左子树放入到队列中作为下一层待遍历的节点
                if node.right:
                    queue.append(node.right)
            res.append(res_temp)#每层遍历结束，就将该层的遍历结果放入到最终的输出数组中
        for i in range(len(res)):
            if i%2==1:
                res[i].reverse() #如果是第偶数行，翻转，reverse是一个自带的反转函数，蛮好用的    
        return res

