# 给你一个二叉树的根节点 root ， 检查它是否轴对称。
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# 递归法
# class Solution:
#     def compare(self,left,right):
#         if left != None and right == None:return False
#         elif left == None and right != None:return False
#         elif left == None and right == None:return True
#         elif left.val != right.val:return False

#         out = self.compare(left.left,right.right)
#         inside = self.compare(left.right,right.left)
#         re = out and inside
#         return re 
#     def isSymmetric(self, root: TreeNode) -> bool:
#         if root == None:return True
#         return self.compare(root.left,root.right)
# 迭代法： 使用队列
# import collections
# class Solution:
#     def isSymmetric(self, root: TreeNode) -> bool:
#         if root == None:
#             return True
#         queue = collections.deque()
#         queue.append(root.left) #将左子树头结点加入队列
#         queue.append(root.right) #将右子树头结点加入队列
#         while queue: #接下来就要判断这这两个树是否相互翻转
#             leftNode = queue.popleft()
#             rightNode = queue.popleft()
#             if not leftNode and not rightNode: #左节点为空、右节点为空，此时说明是对称的
#                 continue
            
#             #左右一个节点不为空，或者都不为空但数值不相同，返回false
#             if not leftNode or not rightNode or leftNode.val != rightNode.val:
#                 return False
#             queue.append(leftNode.left) #加入左节点左孩子
#             queue.append(rightNode.right) #加入右节点右孩子
#             queue.append(leftNode.right) #加入左节点右孩子
#             queue.append(rightNode.left) #加入右节点左孩子
#         return True

# 迭代法：使用栈
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if not root:
            return True
        st = [] #这里改成了栈
        st.append(root.left)
        st.append(root.right)
        while st:
            leftNode = st.pop()
            rightNode = st.pop()
            if not leftNode and not rightNode:
                continue
            if not leftNode or not rightNode or leftNode.val != rightNode.val:
                return False
            st.append(leftNode.left)
            st.append(rightNode.right)
            st.append(leftNode.right)
            st.append(rightNode.left)
        return True


    
