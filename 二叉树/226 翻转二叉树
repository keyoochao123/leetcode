# 给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# 翻转每一个节点的左右孩子,递归法：前序遍历：
# class Solution:
#     def invertTree(self, root: TreeNode) -> TreeNode:
#         if root == None:return
#         root.left,root.right = root.right,root.left
#         self.invertTree(root.left)
#         self.invertTree(root.right)
#         return root
# 迭代法：深度优先遍历（前序遍历）：
# class Solution:
#     def invertTree(self, root: TreeNode) -> TreeNode:
#         if root == None:return
#         st = []
#         st.append(root)
#         while st:
#             node = st.pop()
#             node.left, node.right = node.right, node.left #中
#             if node.right:
#                 st.append(node.right) #右
#             if node.left:
#                 st.append(node.left) #左
#         return root
# 迭代法：广度优先遍历（层序遍历）：
import collections
class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        queue = collections.deque() #使用deque()
        if root:
            queue.append(root)
        while queue:
            size = len(queue)
            for i in range(size):
                node = queue.popleft()
                node.left, node.right = node.right, node.left #节点处理
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        return root

