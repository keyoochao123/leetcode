# 给定一个二叉树，找出其最小深度。

# 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

# 说明：叶子节点是指没有子节点的节点。
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# 递归法
# class Solution:
#     def getDepth(self,node:TreeNode) -> int:
#         if node == None:return 0
#         leftDepth = self.getDepth(node.left)
#         rightDepth = self.getDepth(node.right)
#         if node.left == None and node.right != None:return 1+rightDepth
#         if node.right == None and node.left != None:return 1+leftDepth
#         re = 1 + min(leftDepth,rightDepth)
#         return re
#     def minDepth(self, root: TreeNode) -> int:
#         return self.getDepth(root)
# 迭代法，层序遍历
import collections
class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        que = collections.deque()
        que.append(root)
        res = 1
        while que:
            for _ in range(len(que)):
                node = que.popleft()
                # 当左右孩子都为空的时候，说明是最低点的一层了，退出
                if not node.left and not node.right:
                    return res
                if node.left is not None:
                    que.append(node.left)
                if node.right is not None:
                    que.append(node.right)
            res += 1
        return res
