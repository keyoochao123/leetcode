# 给定一个二叉树的根节点 root ，返回它的 中序 遍历。
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# class Solution:
#     def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
#         re = []
#         def traversal(root:Optional[TreeNode]):
#             if root == None:
#                 return
#             traversal(root.left)
#             re.append(root.val)
#             traversal(root.right)
#         traversal(root)
#         return re
# 遍历
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        stack = []  # 不能提前将root结点加入stack中
        re = []
        cur = root
        while cur or stack:
            # 先迭代访问最底层的左子树结点
            if cur:     
                stack.append(cur)
                cur = cur.left		
            # 到达最左结点后处理栈顶结点    
            else:		
                cur = stack.pop()
                re.append(cur.val)
                # 取栈顶元素右结点
                cur = cur.right	
        return re
