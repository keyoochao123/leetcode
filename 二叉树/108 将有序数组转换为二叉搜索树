# 给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。

# 高度平衡 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

# 首先取数组中间元素的位置，不难写出int mid = (left + right) / 2;，这么写其实有一个问题，就是数值越界，例如left和right都是最大int，这么操作就越界了，在二分法 (opens new window)中尤其需要注意！

# 所以可以这么写：int mid = left + ((right - left) / 2);
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:
        root = self.traversal(nums,0,len(nums)-1)
        return root
    def traversal(self,nums:List[int],left:int,right:int):
        if left>right:return None
        mid = left+(right-left)//2
        mid_root = TreeNode(nums[mid])
        mid_root.left = self.traversal(nums,left,mid-1)
        mid_root.right=self.traversal(nums,mid+1,right)
        return mid_root
                
