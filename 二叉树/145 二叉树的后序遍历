# 给你一棵二叉树的根节点 root ，返回其节点值的 后序遍历 。
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# 迭代
# class Solution:
#     def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
#         re = []
#         def traversal(root:Optional[TreeNode]):
#             if root == None:return
#             traversal(root.left)
#             traversal(root.right)
#             re.append(root.val)
#         traversal(root)
#         return re
# 遍历
class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if root == None:return []
        re = []
        stack = [root] # 先把根节点放进去
        while stack:
            node = stack.pop()
            re.append(node.val)
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
        return re[::-1]
