# 给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        if not root:return False
        else:return self.traversal(root,targetSum-root.val)
    def traversal(self,root:Optional[TreeNode],targetSum:int) -> bool:
            if (not root.left) and (not root.right) and targetSum == 0:
                return True  # 遇到叶子节点，并且计数为0
            if (not root.left) and (not root.right):
                return False  # 遇到叶子节点，计数不为0
            if root.left:
                targetSum -= root.left.val
                if self.traversal(root.left,targetSum):return True
                targetSum += root.left.val
            if root.right:
                targetSum -= root.right.val
                if self.traversal(root.right,targetSum):return True
                targetSum += root.right.val
            return False    
        
