# 给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:
        if not root:return root
        if root.val == key:
            if not root.left and not root.right:# 左右孩子都没有，删除节点返回空值
                del root
                return None
            if not root.left and root.right:
                tmp = root
                root = root.right
                del tmp
                return root
            if not root.right and root.left:
                tmp = root
                root = root.left
                del tmp
                return root
            else:# 左右孩子节点都不为空，则将删除节点的左子树放到删除节点的右子树的最左面节点的左孩子的位置
                v = root.right
                while v.left:
                    v=v.left
                v.left = root.left
                tmp = root
                root = root.right
                del tmp
                return root
        if root.val > key:root.left = self.deleteNode(root.left,key)
        if root.val < key:root.right = self.deleteNode(root.right,key)
        return root
