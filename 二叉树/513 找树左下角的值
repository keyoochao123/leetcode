# 给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。
# 假设二叉树中至少有一个节点。
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# 层序遍历
import collections
class Solution:
    def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:
        queue = collections.deque()
        if root:queue.append(root)
        re = 0
        while queue:
            q_len=len(queue)
            for i in range(q_len): # 最下面的值
                if i == 0:
                    re = queue[i].val # 最左边的值
                cur=queue.popleft()
                if cur.left:queue.append(cur.left)
                if cur.right:queue.append(cur.right)
        return re
