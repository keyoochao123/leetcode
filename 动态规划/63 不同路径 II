# 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。

# 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。

# 现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？

# 网格中的障碍物和空位置分别用 1 和 0 来表示。

class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        row=len(obstacleGrid)
        col=len(obstacleGrid[0])
        dp=[[0 for _ in range(col)] for _ in range(row)]
        if obstacleGrid[0][0] != 1:
            dp[0][0] = 1 
        else: 
            dp[0][0] = 0 # 障碍
        if dp[0][0] == 0: return 0  # 如果第一个格子就是障碍，return 0
        for i in range(1,col):
            if obstacleGrid[0][i] != 1:
                dp[0][i]=dp[0][i-1]
        for i in range(1,row):
            if obstacleGrid[i][0] != 1:
                dp[i][0]=dp[i-1][0]
        for i in range(1,row):
            for j in range(1,col):
                if obstacleGrid[i][j] != 1:
                    dp[i][j]=dp[i][j-1]+dp[i-1][j]
        return dp[-1][-1]
