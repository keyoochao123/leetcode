# 有一堆石头，用整数数组 stones 表示。其中 stones[i] 表示第 i 块石头的重量。

# 每一回合，从中选出任意两块石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下：

# 如果 x == y，那么两块石头都会被完全粉碎；
# 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。
# 最后，最多只会剩下一块 石头。返回此石头 最小的可能重量 。如果没有石头剩下，就返回 0
# 物品的重量为store[i]，物品的价值也为store[i]。
class Solution:
    def lastStoneWeightII(self, stones: List[int]) -> int:
        sumweight = sum(stones)
        target = sumweight//2
        dp=[0]*15001
        for i in range(len(stones)):
            for j in range(target,stones[i]-1,-1):
                dp[j]=max(dp[j],dp[j-stones[i]]+stones[i]) # dp[j - stones[i]]为 容量为j - stones[i]的背包最大所背重量
        return sumweight-2*dp[target]#一堆石头的总重量是dp[target]，另一堆就是sum - dp[target]
        # 在计算target的时候，target = sum / 2 因为是向下取整，所以sum - dp[target] 一定是大于等于dp[target]的。

# 那么相撞之后剩下的最小石头重量就是 (sum - dp[target]) - dp[target]
