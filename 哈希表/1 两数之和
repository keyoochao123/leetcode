# 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。

# 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

# 你可以按任意顺序返回答案。
# 数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。
# set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。
# 此时就要选择另一种数据结构：map ，map是一种key value的存储结构，可以用key保存数值，用value在保存数值所在的下标。
# 寻找taget-nums[i]是否在map中
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        record = dict()
        for id,val in enumerate(nums):
            if target - val not in record:
                record[val] = id
            else:
                return [record[target-val],id] 
