# 给定一个含有 n 个正整数的数组和一个正整数 target 。

# 找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。

# 滑动窗口，就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果。

class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        if not nums:return 0
        total = 0
        start,end=0,0
        ans = len(nums)+1 # 先设置成最大
        while end < len(nums):
            total += nums[end]
            while total >= target: # start右滑
                ans = min(ans,end-start+1)
                total -= nums[start]
                start += 1
            end += 1 # 否则end右滑
        if ans == len(nums)+1:return 0
        else:return ans
