# 输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。

# 要求时间复杂度为O(n)。
# 动态规划

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        for i in range(1,len(nums)):
            nums[i] += max(nums[i-1],0)
        return max(nums)
        
        
# 以数组中第i个数字结尾的前面的数组和小于0的时候，他自己就是最大的子数组了，大于0的时候，可以加上前面的部分，按顺序计算
