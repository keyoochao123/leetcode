# 在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？

class Solution:
    def maxValue(self, grid: List[List[int]]) -> int:
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if i == 0 and j == 0:continue # 为起始元素
                if i == 0:grid[i][j] += grid[i][j-1] # 矩阵第一行元素，只可从左边到达
                elif j == 0:grid[i][j] += grid[i-1][j] # 矩阵第一列元素，只可从上边到达
                else:grid[i][j] += max(grid[i-1][j],grid[i][j-1]) # 可从左边或上面到达
        return grid[-1][-1]
        
# 用动态规划dp
# 状态定义：dp(i,j)表示从棋盘的左上角开始，到达单元格(i,j)的时候的能拿到礼物的最大价值
# 转移方程：见里面的if else
# 初始状态：单元格(0,0)
# 返回值：dp[m-1][n-1]

class Solution:
    def maxValue(self, grid: List[List[int]]) -> int:
        m,n = len(grid),len(grid[0]) # 先初始化第一行第一列，减少冗余的循环判断
        for j in range(1,n):
            grid[0][j] += grid[0][j-1]
        for i in range(1,m):
            grid[i][0] += grid[i-1][0]
        for i in range(1,m):
            for j in range(1,n):
                grid[i][j] += max(grid[i-1][j],grid[i][j-1])
        return grid[-1][-1]
