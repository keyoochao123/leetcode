# 从若干副扑克牌中随机抽 5 张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。
# 判别重复： 利用 Set 实现遍历判重， Set 的查找方法的时间复杂度为 O(1)；
# 获取最大 / 最小的牌： 借助辅助变量 ma 和 mi ，遍历统计即可。

class Solution:
    def isStraight(self, nums: List[int]) -> bool:
        rep=set()
        ma,mi=0,14
        for num in nums:
            if num == 0:continue # 遇到0的时候跳过
            mi=min(mi,num)
            ma=max(ma,num) # 最大值和最小值要有范围限制
            if num in rep:return False # 有重复的
            rep.add(num)
        return ma-mi<5
