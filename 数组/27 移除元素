# 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

# 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

# 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

# 要知道数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖。
# 双指针法（快慢指针法）一个走一个不走
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        fast = slow = 0

        while fast < len(nums):

            if nums[fast] != val:
                nums[slow] = nums[fast]
                slow += 1

            # 当 fast 指针遇到要删除的元素时停止赋值，往前加一
            # slow 指针停止移动, fast 指针继续前进
            fast += 1

        return slow
