# 找出所有相加之和为 n 的 k 个数的组合，且满足下列条件：

# 只使用数字1到9
# 每个数字 最多使用一次 
# 返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。
# 就是在[1-9]的数组中找出相加为n的k个数
# 二叉树的深为k，宽为9
class Solution:
    def __init__(self):
        self.path = []
        self.res = []
        self.sum_now = 0
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        self.backtracking(k,n,1)
        return self.res
    def backtracking(self,k:int,n:int,start_num:int):
        if self.sum_now > n:return 
        if(len(self.path)) == k:
            if self.sum_now == n:
                self.res.append(self.path[:])
            return
        for i in range(start_num,10-(k-len(self.path))+1):
            self.path.append(i)
            self.sum_now += i
            self.backtracking(k, n, i + 1)
            self.path.pop()
            self.sum_now -= i
