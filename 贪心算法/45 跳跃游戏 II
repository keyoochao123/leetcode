# 给你一个非负整数数组 nums ，你最初位于数组的第一个位置。

# 数组中的每个元素代表你在该位置可以跳跃的最大长度。

# 你的目标是使用最少的跳跃次数到达数组的最后一个位置。

# 假设你总是可以到达数组的最后一个位置。

class Solution:
    def jump(self, nums: List[int]) -> int:
        if len(nums) == 1:return 0
        ans = 0
        cur = 0
        nex = 0
        for i in range(len(nums)):
            nex = max(i+nums[i],nex) # 下一个位置的最大长度
            if i == cur:
                if cur != len(nums)-1:# 当前到达不了
                    ans += 1
                    cur = nex
                    if nex >= len(nums)-1:break
        return ans
