# 给你一个整数数组 nums 和一个整数 k ，按以下方法修改该数组：

# 选择某个下标 i 并将 nums[i] 替换为 -nums[i] 。
# 重复这个过程恰好 k 次。可以多次选择同一个下标 i 。

# 以这种方式修改数组后，返回数组 可能的最大和 。
# 局部最优：让绝对值大的负数变为正数，当前数值达到最大，整体最优：整个数组和达到最大。
# 局部最优：只找数值最小的正整数进行反转，当前数值可以达到最大（例如正整数数组{5, 3, 1}，反转1 得到-1 比反转5得到的-5 大多了），全局最优：整个数组和达到最大
# 第一步：将数组按照绝对值大小从大到小排序，注意要按照绝对值的大小
# 第二步：从前向后遍历，遇到负数将其变为正数，同时K--
# 第三步：如果K还大于0，那么反复转变数值最小的元素，将K用完
# 第四步：求和
class Solution:
    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:
        nums = sorted(nums,key=abs,reverse=True)
        for i in range(len(nums)):
            if k>0 and nums[i]<0:
                nums[i] *= -1
                k -= 1
        if k > 0:
            nums[-1] *= (-1)**k
        return sum(nums)
