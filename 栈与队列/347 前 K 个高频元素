# 给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。
# 统计元素出现的频率，这一类的问题可以使用map来进行统计。
# 然后是对频率进行排序，这里我们可以使用一种 容器适配器就是优先级队列
# 优先级队列对外接口只是从队头取元素，从队尾添加元素，再无其他取元素的方式，看起来就是一个队列。
# 而且优先级队列内部元素是自动依照元素的权值排列。heapq这个模块提供了堆队列算法的实现，也称为优先队列算法。
import heapq
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        map_ = {}
        # 统计元素出现频率
        for i in range(len(nums)):
            map_[nums[i]] = map_.get(nums[i],0) + 1
        #对频率排序
        #定义一个小顶堆，大小为k
        mi_que = []
        for key,freq in map_.items():
            heapq.heappush(mi_que,(freq ,key))
            if len(mi_que) > k:
                heapq.heappop(mi_que)
        #找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组
        re = [0] * k
        for i in range(k-1, -1, -1):
            re[i] = heapq.heappop(mi_que)[1] #[0]是频率
        return re
# 时间复杂度：O(nlogk)
# 空间复杂度：O(n)
